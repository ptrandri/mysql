# Step 1 
Install Openstack (Pre-Requirements)
sudo apt -y update && sudo apt -y upgrade; 
sudo apt -y install mariadb-server -y; sudo apt -y install rabbitmq-server memcached python3-pymysql nginx libnginx-mod-stream;

rabbitmqctl add_user openstack password ; rabbitmqctl set_permissions openstack ".*" ".*" ".*"
sed -i 's/127.0.0.1/10.10.2.151/g' /etc/mysql/mariadb.conf.d/50-server.cnf
sed -i 's/127.0.0.1/10.10.2.151/g' /etc/memcached.conf
unlink /etc/nginx/sites-enabled/default
systemctl restart mariadb rabbitmq-server memcached nginx

# Step 2 
{database}
create database keystone; 
grant all privileges on keystone.* to keystone@'localhost' identified by 'password';
grant all privileges on keystone.* to keystone@'%' identified by 'password';
flush privileges;
exit

{keystone}
apt -y install keystone python3-openstackclient apache2 libapache2-mod-wsgi-py3 python3-oauth2client
cp /etc/keystone/keystone.conf /etc/keystone/keystone.conf.default
sed -i 's/#memcache_servers = localhost:11211/memcache_servers = 10.10.2.151:11211/g' /etc/keystone/keystone.conf
sed -i 's|sqlite:////var/lib/keystone/keystone.db|mysql+pymysql://keystone:password@10.10.2.151/keystone|g' /etc/keystone/keystone.conf

su -s /bin/bash keystone -c "keystone-manage db_sync"
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
export controller=


keystone-manage bootstrap --bootstrap-password adminpassword \
--bootstrap-admin-url https://$controller:5000/v3/ \
--bootstrap-internal-url https://$controller:5000/v3/ \
--bootstrap-public-url https://$controller:5000/v3/ \
--bootstrap-region-id RegionOne


    SSLEngine on
    SSLHonorCipherOrder on
    SSLCertificateFile /etc/ssl/private/server.pem
    SSLCertificateKeyFile /etc/ssl/private/server.pem





# Step 5
{Glance}
openstack user create --domain default --project service --password servicepassword glance ;
openstack role add --project service --user glance admin ;
openstack service create --name glance --description "OpenStack Image service" image ;
export controller=openstack-server.internal.org ;
openstack endpoint create --region RegionOne image public https://$controller:9292 ;
openstack endpoint create --region RegionOne image internal https://$controller:9292 ;
openstack endpoint create --region RegionOne image admin https://$controller:9292 ; 


{mysql}
create database glance; 
grant all privileges on glance.* to glance@'localhost' identified by 'password'; 
grant all privileges on glance.* to glance@'%' identified by 'password'; 
flush privileges; 


apt -y install glance
mv /etc/glance/glance-api.conf /etc/glance/glance-api.conf.org
nano /etc/glance/glance-api.conf


# glance-api.conf
# create new
[DEFAULT]
bind_host = 127.0.0.1
# RabbitMQ connection info
transport_url = rabbit://openstack:password@dlp.srv.world

[glance_store]
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/

[database]
# MariaDB connection info
connection = mysql+pymysql://glance:password@dlp.srv.world/glance

# keystone auth info
[keystone_authtoken]
www_authenticate_uri = https://dlp.srv.world:5000
auth_url = https://dlp.srv.world:5000
memcached_servers = dlp.srv.world:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = glance
password = servicepassword
# if using self-signed certs on Apache2 Keystone, turn to [true]
insecure = false

[paste_deploy]
flavor = keystone
# close glance-api.conf

chmod 640 /etc/glance/glance-api.conf ; 
chown root:glance /etc/glance/glance-api.conf ;
su -s /bin/bash glance -c "glance-manage db_sync" ;
systemctl restart glance-api ; 
systemctl enable glance-api




# MYSQL
create database nova; 
grant all privileges on nova.* to nova@'localhost' identified by 'password'; 
grant all privileges on nova.* to nova@'%' identified by 'password'; 

create database nova_api; 
grant all privileges on nova_api.* to nova@'localhost' identified by 'password'; 
grant all privileges on nova_api.* to nova@'%' identified by 'password'; 


create database placement; 
grant all privileges on placement.* to placement@'localhost' identified by 'password'; 
grant all privileges on placement.* to placement@'%' identified by 'password'; 

Query OK, 0 rows affected (0.00 sec)

create database nova_cell0; 
Query OK, 1 row affected (0.00 sec)

grant all privileges on nova_cell0.* to nova@'localhost' identified by 'password'; 
Query OK, 0 rows affected (0.00 sec)

grant all privileges on nova_cell0.* to nova@'%' identified by 'password'; 
Query OK, 0 rows affected (0.00 sec)

flush privileges; 
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> exit
# MYSQL














# Configure Networking Neutron
nano /etc/systemd/network/ens34.network
[Match]
Name=ens34

[Network]
LinkLocalAddressing=no
IPv6AcceptRA=no


ip link set ens34 up
ovs-vsctl add-br br-ens34
ovs-vsctl add-port br-ens34 ens34
ovs-vsctl set open . external-ids:ovn-bridge-mappings=physnet1:br-ens34


projectID=$(openstack project list | grep service | awk '{print $2}')

openstack network create --project $projectID \
--share --provider-network-type flat --provider-physical-network physnet1 sharednet1


openstack subnet create subnet1 --network sharednet1 \
--project $projectID --subnet-range 10.0.0.0/24 \
--allocation-pool start=10.0.0.200,end=10.0.0.254 \
--gateway 10.0.0.1 --dns-nameserver 10.0.0.10


openstack network list
openstack subnet list


# New Line
openstack project create --domain default --description "Hiroshima Project" hiroshima
openstack user create --domain default --project hiroshima --password userpassword serverworld
openstack role create CloudUser
openstack role add --project hiroshima --user serverworld CloudUser
openstack flavor create --id 0 --vcpus 1 --ram 2048 --disk 10 m1.small





# Ubuntu 20.04

rabbitmqctl add_user openstack password
rabbitmqctl set_permissions openstack ".*" ".*" ".*"


export controller=openstack-server.internal.org
